// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_contract is a generated GoMock package.
package mock_contract

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	contract "github.com/itksb/go-secret-keeper/pkg/contract"
)

// MockIAccount is a mock of IAccount interface.
type MockIAccount struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountMockRecorder
}

// MockIAccountMockRecorder is the mock recorder for MockIAccount.
type MockIAccountMockRecorder struct {
	mock *MockIAccount
}

// NewMockIAccount creates a new mock instance.
func NewMockIAccount(ctrl *gomock.Controller) *MockIAccount {
	mock := &MockIAccount{ctrl: ctrl}
	mock.recorder = &MockIAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccount) EXPECT() *MockIAccountMockRecorder {
	return m.recorder
}

// GetID mocks base method.
func (m *MockIAccount) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockIAccountMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockIAccount)(nil).GetID))
}

// GetLogin mocks base method.
func (m *MockIAccount) GetLogin() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockIAccountMockRecorder) GetLogin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockIAccount)(nil).GetLogin))
}

// SetPasswordHash mocks base method.
func (m *MockIAccount) SetPasswordHash(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPasswordHash", arg0)
}

// SetPasswordHash indicates an expected call of SetPasswordHash.
func (mr *MockIAccountMockRecorder) SetPasswordHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordHash", reflect.TypeOf((*MockIAccount)(nil).SetPasswordHash), arg0)
}

// MockITokenProvider is a mock of ITokenProvider interface.
type MockITokenProvider struct {
	ctrl     *gomock.Controller
	recorder *MockITokenProviderMockRecorder
}

// MockITokenProviderMockRecorder is the mock recorder for MockITokenProvider.
type MockITokenProviderMockRecorder struct {
	mock *MockITokenProvider
}

// NewMockITokenProvider creates a new mock instance.
func NewMockITokenProvider(ctrl *gomock.Controller) *MockITokenProvider {
	mock := &MockITokenProvider{ctrl: ctrl}
	mock.recorder = &MockITokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenProvider) EXPECT() *MockITokenProviderMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockITokenProvider) GenerateToken(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockITokenProviderMockRecorder) GenerateToken(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockITokenProvider)(nil).GenerateToken), ctx, userID)
}

// ValidateToken mocks base method.
func (m *MockITokenProvider) ValidateToken(ctx context.Context, token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockITokenProviderMockRecorder) ValidateToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockITokenProvider)(nil).ValidateToken), ctx, token)
}

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockIAuthService) SignIn(ctx context.Context, login, password string) (contract.IAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, login, password)
	ret0, _ := ret[0].(contract.IAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthServiceMockRecorder) SignIn(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthService)(nil).SignIn), ctx, login, password)
}

// SignUp mocks base method.
func (m *MockIAuthService) SignUp(ctx context.Context, login, password string) (contract.IAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, login, password)
	ret0, _ := ret[0].(contract.IAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAuthServiceMockRecorder) SignUp(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAuthService)(nil).SignUp), ctx, login, password)
}

// MockIAuthRepository is a mock of IAuthRepository interface.
type MockIAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepositoryMockRecorder
}

// MockIAuthRepositoryMockRecorder is the mock recorder for MockIAuthRepository.
type MockIAuthRepositoryMockRecorder struct {
	mock *MockIAuthRepository
}

// NewMockIAuthRepository creates a new mock instance.
func NewMockIAuthRepository(ctrl *gomock.Controller) *MockIAuthRepository {
	mock := &MockIAuthRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepository) EXPECT() *MockIAuthRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAuthRepository) Create(ctx context.Context, login, password string) (contract.IAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, login, password)
	ret0, _ := ret[0].(contract.IAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAuthRepositoryMockRecorder) Create(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAuthRepository)(nil).Create), ctx, login, password)
}

// Find mocks base method.
func (m *MockIAuthRepository) Find(ctx context.Context, login, password string) (contract.IAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, login, password)
	ret0, _ := ret[0].(contract.IAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIAuthRepositoryMockRecorder) Find(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIAuthRepository)(nil).Find), ctx, login, password)
}

// MockIPassHasher is a mock of IPassHasher interface.
type MockIPassHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIPassHasherMockRecorder
}

// MockIPassHasherMockRecorder is the mock recorder for MockIPassHasher.
type MockIPassHasherMockRecorder struct {
	mock *MockIPassHasher
}

// NewMockIPassHasher creates a new mock instance.
func NewMockIPassHasher(ctrl *gomock.Controller) *MockIPassHasher {
	mock := &MockIPassHasher{ctrl: ctrl}
	mock.recorder = &MockIPassHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPassHasher) EXPECT() *MockIPassHasherMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockIPassHasher) ComparePassword(hashedPwd string, plainPwd []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPwd, plainPwd)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockIPassHasherMockRecorder) ComparePassword(hashedPwd, plainPwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockIPassHasher)(nil).ComparePassword), hashedPwd, plainPwd)
}

// HashPassword mocks base method.
func (m *MockIPassHasher) HashPassword(password []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIPassHasherMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIPassHasher)(nil).HashPassword), password)
}
